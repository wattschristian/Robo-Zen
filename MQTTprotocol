import UIKit
import CocoaMQTT

var isMQTTConnected: Bool = false

class MQTTSettingsViewController: UIViewController, CocoaMQTTDelegate {
    
    var mqttClient: CocoaMQTT!
    let clientID = "iOS_" + String(ProcessInfo().processIdentifier)
    // Replace with your Raspberry Pi's IP address and port
    let host = "192.168.1.xxx"
    let port: UInt16 = 1883
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = UIColor(red: 0.8, green: 0.9, blue: 1.0, alpha: 1.0)
        
        let titleLabel = UILabel()
        titleLabel.text = "MQTT Settings"
        titleLabel.font = UIFont.systemFont(ofSize: 34, weight: .bold)
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        titleLabel.textAlignment = .left
        view.addSubview(titleLabel)
        
        NSLayoutConstraint.activate([
            titleLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 40),
            titleLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20)
        ])
        
        setupButtons()
        setupMQTTClient()
    }
    
    func setupMQTTClient() {
        mqttClient = CocoaMQTT(clientID: clientID, host: host, port: port)
        mqttClient.username = "your_username"  // If required
        mqttClient.password = "your_password"  // If required
        mqttClient.keepAlive = 60
        mqttClient.delegate = self
    }
    
    func setupButtons() {
        let stackView = UIStackView()
        stackView.axis = .vertical
        stackView.spacing = 20
        stackView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(stackView)
        
        let buttonTitles = [
            "Connect to Pi",
            "Disconnect from Pi",
            "Send Test Message"
        ]
        
        for title in buttonTitles {
            let button = UIButton(type: .system)
            button.setTitle(title, for: .normal)
            button.titleLabel?.font = UIFont(name: "AvenirNext-Bold", size: 28)
            button.backgroundColor = UIColor.systemTeal
            button.setTitleColor(.white, for: .normal)
            button.layer.cornerRadius = 10
            button.layer.borderColor = UIColor.black.cgColor
            button.addTarget(self, action: #selector(buttonTapped(_:)), for: .touchUpInside)
            stackView.addArrangedSubview(button)
        }
        
        NSLayoutConstraint.activate([
            stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
    }
    
    @objc func buttonTapped(_ sender: UIButton) {
        switch sender.currentTitle {
        case "Connect to Pi":
            connectToPi()
        case "Disconnect from Pi":
            disconnectFromPi()
        case "Send Test Message":
            sendTestMessage()
        default:
            break
        }
    }
    
    @objc func connectToPi() {
        _ = mqttClient.connect()
        showAlert(title: "Connecting", message: "Connecting to Raspberry Pi...")
    }
    
    @objc func disconnectFromPi() {
        mqttClient.disconnect()
    }
    
    @objc func sendTestMessage() {
        if isMQTTConnected {
            mqttClient.publish("ios/test", withString: "Hello from iOS!")
            showAlert(title: "Message Sent", message: "Test message sent to Raspberry Pi")
        } else {
            showAlert(title: "Error", message: "Not connected to MQTT broker")
        }
    }
    
    func showAlert(title: String, message: String) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
        present(alert, animated: true, completion: nil)
    }
    
    // MARK: - CocoaMQTT Delegate Methods
    
    func mqtt(_ mqtt: CocoaMQTT, didConnect host: String, port: Int) {
        print("Connected to \(host) on port \(port)")
        isMQTTConnected = true
        mqttClient.subscribe("raspberrypi/response")
        showAlert(title: "Connected", message: "Connected to Raspberry Pi")
    }
    
    func mqtt(_ mqtt: CocoaMQTT, didDisconnect error: Error?) {
        print("Disconnected from broker")
        isMQTTConnected = false
        showAlert(title: "Disconnected", message: "Disconnected from Raspberry Pi")
    }
    
    func mqtt(_ mqtt: CocoaMQTT, didReceiveMessage message: CocoaMQTTMessage, id: UInt16) {
        if let messageString = message.string {
            print("Received message: \(messageString)")
            showAlert(title: "Message Received", message: messageString)
        }
    }
    
    // Required delegate methods
    func mqtt(_ mqtt: CocoaMQTT, didPublishMessage message: CocoaMQTTMessage, id: UInt16) {}
    func mqtt(_ mqtt: CocoaMQTT, didPublishAck id: UInt16) {}
    func mqtt(_ mqtt: CocoaMQTT, didSubscribeTopic topic: String) {}
    func mqtt(_ mqtt: CocoaMQTT, didUnsubscribeTopic topic: String) {}
}
